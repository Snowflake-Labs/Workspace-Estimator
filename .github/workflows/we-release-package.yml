name: Release Workspace Extractor

on:
  release:
    types: [published]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      python-version:
        description: 'Python version to build'
        required: false
        default: '3.10'
        type: choice
        options:
        - '3.10'
        - '3.11'

permissions:
  contents: write
  id-token: write
  pull-requests: write

env:
  PYTHON_VERSION: ${{ inputs.python-version || '3.10' }}
  TWINE_VERSION: "6.0.1"

jobs:
  deploy:
    name: Deploy Packages
    runs-on: ubuntu-latest

    steps:
      - name: Check run mode
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "🔧 MANUAL RUN - DRY RUN MODE"
            echo "This is a manual execution for testing purposes."
            echo "No packages will be published to PyPI or GitHub releases."
            echo "Python version: ${{ env.PYTHON_VERSION }}"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "🔧 PULL REQUEST - DRY RUN MODE"
            echo "This is a pull request execution for testing purposes."
            echo "No packages will be published to PyPI or GitHub releases."
            echo "Python version: ${{ env.PYTHON_VERSION }}"
            echo "PR #${{ github.event.number }}: ${{ github.event.pull_request.title }}"
          else
            echo "🚀 AUTOMATIC RELEASE MODE"
            echo "This is an automatic release triggered by a published release."
            echo "Packages will be built, signed, and published to PyPI."
          fi

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "${{ env.PYTHON_VERSION }}"

      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip -q
          pip install hatch requests build twine==${{ env.TWINE_VERSION }} sigstore -q && pip list
          hatch status && hatch env show && hatch --version
        shell: bash
        working-directory: "${{ github.workspace }}/DBX/workspace_extractor_package"

      - name: Get version from tag
        id: get_version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            VERSION=${VERSION#v}
            echo "version=$VERSION"
          else
            VERSION=$(git describe --tags $(git rev-list --tags --max-count=1))
            VERSION=${VERSION#v}
            echo "version=$VERSION"
          fi

          if [[ "${{ github.event_name }}" == "workflow_dispatch" || "${{ github.event_name }}" == "pull_request" ]]; then
            echo "Manual/PR run detected, using version: $VERSION"
          fi

          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(rc[0-9]+)?$ ]]; then
            echo "version=$VERSION"
            echo "Error: No valid version found"
            exit 1
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update Version [workspace_extractor_package]
        run: |
          set -e
          echo "Current directory: $PWD" && ls -la
          echo "NEW_VERSION=${NEW_VERSION}"
          find . -name "${FILE_NAME}" | while read file; do
            echo "Updating $file"
            sed -i "s/^__version__ = \".*\"/__version__ = \"${NEW_VERSION}\"/" "$file"
            echo "Updated version in $file:"
            cat "$file"
          done
        env:
          FILE_NAME: __version__.py
          NEW_VERSION: ${{ steps.get_version.outputs.version }}
        working-directory: "${{ github.workspace }}"

      - name: Generate Package [workspace_extractor_package]
        run: |
          hatch build
          echo "Current directory: $PWD" && ls -la dist
        working-directory: "${{ github.workspace }}/DBX/workspace_extractor_package"

      - name: Show generated artifacts
        run: |
          echo "Current directory: $PWD" && ls -la dist
          if [ -d "dist" ]; then
            echo "Artifacts found in dist"
          else
            echo "No artifacts found"
            exit 1
          fi
        working-directory: "${{ github.workspace }}/DBX/workspace_extractor_package"

      - name: Show artifact info
        run: |
          echo "📦 Artifact will be named: workspace_extractor-v${{ steps.get_version.outputs.version }}"
          echo "📁 Package version: ${{ steps.get_version.outputs.version }}"

      - name: Get Workflow File Name
        id: get_workflow_file
        run: |
          WORKFLOW_NAME="${{ github.workflow }}"
          WORKFLOW_FILE=$(grep -rl "name: ${WORKFLOW_NAME}" .github/workflows/*.yml)
          echo "Workflow file: ${WORKFLOW_FILE}"
          echo "workflow_file=${WORKFLOW_FILE}" >> $GITHUB_ENV

      - name: Sign and Verify Packages
        run: |
          echo "The workflow file is: ${{ env.workflow_file }}"
          echo "Full URL: ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/${{ env.workflow_file }}@${GITHUB_REF}"

          for dist in $(find . -type f -name "*.whl" -o -name "*.tar.gz"); do
            dist_base="$(basename "${dist}")"
            echo "Processing: ${dist}"
            echo "dist_base: ${dist_base}"

            echo "Sign using sigstore"
            python -m \
              sigstore sign "${dist}" \
              --output-signature "${dist_base}.sig" \
              --output-certificate "${dist_base}.crt" \
              --bundle "${dist_base}.sigstore"

            echo "Verify using .sig and .crt pair"
            python -m \
              sigstore verify identity "${dist}" \
              --signature "${dist_base}.sig" \
              --cert "${dist_base}.crt" \
              --cert-oidc-issuer https://token.actions.githubusercontent.com \
              --cert-identity "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/${{ env.workflow_file }}@${GITHUB_REF}"

            echo "Verify using .sigstore bundle"
            python -m \
              sigstore verify identity "${dist}" \
              --bundle "${dist_base}.sigstore" \
              --cert-oidc-issuer https://token.actions.githubusercontent.com \
              --cert-identity "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/${{ env.workflow_file }}@${GITHUB_REF}"
          done
        working-directory: ${{ github.workspace }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: workspace_extractor-v${{ steps.get_version.outputs.version }}
          path: |
            ./dist/*
            ./**/dist/*

  publish:
    name: Publish Packages PyPI
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'release'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version_publish
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: workspace_extractor-v${{ steps.get_version_publish.outputs.version }}
          path: ./dist

      - name: Get directory structure
        run: |
          echo "Current directory: $(pwd)" && ls -la dist
          echo "Directory structure: $(find . -type f -name "*.whl" -o -name "*.tar.gz")"
        working-directory: ${{ github.workspace }}

      - name: Upload Packages to Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for file in $(find . -type f -name "*.whl" -o -name "*.tar.gz"); do
            echo "Uploading $file..."
            gh release upload "${GITHUB_REF#refs/tags/}" "$file"
          done
        working-directory: ./dist

      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip
          pip install twine==$TWINE_VERSION -q
          pip list --verbose
        env:
          TWINE_VERSION: "${{ env.TWINE_VERSION }}"

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
          TWINE_VERBOSE: 1
        run: |
          echo "Checking distributions..."
          ls -la
          echo "Uploading to PyPI..."
          find . -name "*.whl" -o -name "*.tar.gz" | xargs twine upload --verbose
        working-directory: ./dist
